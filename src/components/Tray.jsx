/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { useBox, usePlane } from '@react-three/cannon';

const Tray = function ({ material }) {
  // const trayGroupRef = useRef();
  const [trayGroupRef, api] = useBox(() => ({
    type: 'Kinematic',
    args: [0, 0, 0],
    onCollide: (e) => console.log('collision'),
  }));
  const { nodes } = useGLTF('/tray.glb');
  console.log(material);
  return (
    <group
      ref={trayGroupRef}
      dispose={null}
      castShadow
      receiveShadow
      position={[0, -100, 0]}
      onClick={(e) => console.log('touch the tray')}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.dice_traybase.geometry}
      >
        <meshPhysicalMaterial
          color={material.base}
          wireframe={material.wireframe}
          metalness={material.trayMetal}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.dice_trayinner.geometry}
      >
        <meshPhysicalMaterial
          color={material.inner}
          wireframe={material.wireframe}
          metalness={material.trayMetal}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.dice_traytrim.geometry}
      >
        <meshPhysicalMaterial
          color={material.trim}
          wireframe={material.wireframe}
          metalness={material.trayMetal}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.dice_trayouter.geometry}
      >
        <meshPhysicalMaterial
          color={material.outer}
          wireframe={material.wireframe}
          metalness={material.trayMetal}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.dice_trayunder.geometry}
      >
        <meshPhysicalMaterial
          color={material.under}
          wireframe={material.wireframe}
          metalness={material.trayMetal}
        />
      </mesh>

    </group>
  );
};

useGLTF.preload('/tray.glb');

export default Tray;
